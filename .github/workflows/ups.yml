name: Build OpenWrt SDK for Multiple Architectures

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build and upload'
        required: true
        default: 'true'

env:
  TZ: Asia/Tehran
  packages: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - x86_64
          - aarch64_generic
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - arm_cortex-a7
          - arm_cortex-a7_neon-vfpv4
          - arm_cortex-a8_vfpv3
          - arm_cortex-a9
          - arm_cortex-a9_neon
          - arm_cortex-a9_vfpv3-d16
          - arm_cortex-a15_neon-vfpv4
          - mips_24kc
          - mips_4kec
          - mips_mips32
          - mipsel_24kc
          - mipsel_74kc
          - mipsel_mips32

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git ccache gettext zlib1g-dev libssl-dev xsltproc file unzip wget python3

      - name: Install Dependencies for libmaxminddb
        run: |
          sudo apt-get install -y autoconf automake libtool pkg-config

      - name: Install libmaxminddb
        run: |
          git clone https://github.com/maxmind/libmaxminddb.git
          cd libmaxminddb
          ./bootstrap
          ./configure
          make
          sudo make install
          sudo sh -c "echo /usr/local/lib  >> /etc/ld.so.conf.d/local.conf"
          sudo ldconfig
          cd ..

      - name: Download and extract SDK for ${{ matrix.platform }}
        run: |
          case "${{ matrix.platform }}" in
            x86_64)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/openwrt-sdk-23.05.0-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            aarch64_generic)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/rockchip/armv8/openwrt-sdk-23.05.0-rockchip-armv8_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            aarch64_cortex-a53)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa53/openwrt-sdk-23.05.0-mvebu-cortexa53_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            aarch64_cortex-a72)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa72/openwrt-sdk-23.05.0-mvebu-cortexa72_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a7)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/mediatek/mt7629/openwrt-sdk-23.05.0-mediatek-mt7629_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a7_neon-vfpv4)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/sunxi/cortexa7/openwrt-sdk-23.05.0-sunxi-cortexa7_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a8_vfpv3)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/sunxi/cortexa8/openwrt-sdk-23.05.0-sunxi-cortexa8_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a9)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/bcm53xx/generic/openwrt-sdk-23.05.0-bcm53xx-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a9_neon)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/zynq/generic/openwrt-sdk-23.05.0-zynq-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a9_vfpv3-d16)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa9/openwrt-sdk-23.05.0-mvebu-cortexa9_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            arm_cortex-a15_neon-vfpv4)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/ipq806x/generic/openwrt-sdk-23.05.0-ipq806x-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz"
              ;;
            mips_24kc)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/ath79/generic/openwrt-sdk-23.05.0-ath79-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            mips_4kec)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/realtek/rtl838x/openwrt-sdk-23.05.0-realtek-rtl838x_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            mips_mips32)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/bcm63xx/generic/openwrt-sdk-23.05.0-bcm63xx-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            mipsel_24kc)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/ramips/rt288x/openwrt-sdk-23.05.0-ramips-rt288x_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            mipsel_74kc)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/ramips/rt3883/openwrt-sdk-23.05.0-ramips-rt3883_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            mipsel_mips32)
              url="https://downloads.openwrt.org/releases/23.05.0/targets/bcm47xx/generic/openwrt-sdk-23.05.0-bcm47xx-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
              ;;
            *)
              echo "Unknown platform: ${{ matrix.platform }}"
              exit 1
              ;;
          esac

          wget -q $url -O openwrt-sdk.tar.xz
          tar -xf openwrt-sdk.tar.xz
          mv openwrt-sdk-* sdk

          if [ ! -d "sdk" ]; then
            echo "SDK extraction failed or sdk directory not found."
            exit 1
          fi

      - name: Configure feeds for ${{ matrix.platform }}
        run: |
          cd sdk
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-23.05" > feeds.conf
           echo "src-git packages https://github.com/openwrt/packages.git;openwrt-23.05" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-23.05" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-23.05" >> feeds.conf
          echo "src-git passwall_packages https://github.com/peditx/openwrt-passwall-packages.git;main" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a || { echo "Feed update/install failed"; exit 1; }
          ./scripts/feeds install -a -f -p passwall_packages || { echo "Passwall packages install failed"; exit 1; }
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          make defconfig

      - name: Download Packages
        run: |
          cd sdk
          make download -j8

      - name: Compile Packages
        id: compile
        run: |
          cd sdk
          force_build="${{ github.event.inputs.force_build }}"
          if [ "$force_build" == "true" ]; then
            echo "Force build is enabled."
            make -j$(nproc) V=s $(for package in brook chinadns-ng dns2socks dns2tcp gn hysteria ipt2socks microsocks naiveproxy pdnsd-alt shadowsocksr-libev shadowsocks-rust simple-obfs sing-box ssocks tcping trojan trojan-go trojan-plus tuic-client v2ray-core v2ray-geodata v2ray-plugin xray-core xray-plugin; do echo "package/feeds/passwall_packages/$package/compile"; done)
          elif [ -z "$CHANGED_DIRS" ]; then
            echo "No changes detected"
            exit 0
          else
            IFS=',' read -ra DIRS <<< "$CHANGED_DIRS"
            for DIR in "${DIRS[@]}"; do
              if [ -d "package/feeds/passwall_packages/$DIR" ]; then
                cd sdk
                make package/feeds/passwall_packages/$DIR/compile -j$(nproc) V=s || exit 1
              else
                echo "Directory $DIR does not exist"
                exit 1
              fi
            done
          fi

      - name: Package Output
        run: |
          mkdir -p output/${{ matrix.platform }}
          cp -r sdk/bin/* output/${{ matrix.platform }}/

      - name: Upload to SFTP server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: 22
          source: "output/${{ matrix.platform }}/*"
          target: "/var/www/html/passwall-packages/${{ matrix.platform }}/"
