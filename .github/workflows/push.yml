name: Push

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build and upload'
        required: true
        default: 'false'

env:
  TZ: Asia/Shanghai
  packages: ${{ github.repository }}

jobs:
  job_auto_compile:
    runs-on: ubuntu-latest
    name: test build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/openwrt-sdk-23.05.0-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          # ... add more platforms here ...

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Setup variables
      run: |
        # Set the BASE_SHA and HEAD_SHA depending on event type (push or pull_request)
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "BASE_SHA=$(git merge-base refs/remotes/origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" == "push" ]; then
          echo "BASE_SHA=${{ github.event.before }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.after }}" >> $GITHUB_ENV
        fi

    - name: Detect Changed Directories
      id: detect-changes
      run: |
        # Detect which directories have changed
        CHANGED_DIRS=$(git diff --name-only $BASE_SHA $HEAD_SHA | awk -F'/' '{print $1}' | sort -u | tr '\n' ',')
        echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV

    - name: Initialization ${{ matrix.platform }} compile environment
      run: |
        # Initialize the environment and install necessary packages
        sudo -E apt-get update
        sudo -E apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev wget

    - name: ${{ matrix.platform }} sdk download
      run: |
        wget ${{ matrix.url_sdk }}
        file_name=$(basename ${{ matrix.url_sdk }})
        mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
        cd sdk

    - name: SSH connection to Actions
      uses: mxschmitt/action-tmate@v3
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')

    - name: ${{ matrix.platform }} feeds configuration packages
      run: |
        cd sdk
        echo "src-git passwall_packages https://github.com/${{ env.packages }}.git;main" > feeds.conf
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f -p passwall_packages
        make defconfig

    - name: Compile Changed Packages
      id: compile
      run: |
        cd sdk
        force_build="${{ github.event.inputs.force_build }}"
        if [ "$force_build" == "true" ]; then
          echo "Force build is enabled."
        elif [ -z "$CHANGED_DIRS" ]; then
          echo "No changes detected"
          exit 0
        fi
        IFS=',' read -ra DIRS <<< "$CHANGED_DIRS"
        for DIR in "${DIRS[@]}"; do
          if [ -d "package/feeds/passwall_packages/$DIR" ]; then
            make package/feeds/passwall_packages/$DIR/compile -j$(nproc) V=s || exit 1
          else
            echo "Directory $DIR does not exist"
            exit 1
          fi
        done

    - name: Prepare SFTP upload script
      run: |
        echo 'cd sdk' > upload.sh
        echo 'sshpass -p "${{ secrets.SFTP_PASSWORD }}" ssh ${{ secrets.SFTP_USER }}@static.115.193.75.5.clients.your-server.de "mkdir -p /var/www/${{ matrix.platform }}/targets /var/www/${{ matrix.platform }}/packages"' >> upload.sh
        echo 'find sdk/bin/targets -type f \( -name "*.ipk" -o -name "Packages" -o -name "Packages.gz" -o -name "Packages.sig" -o -name "Packages.manifest" \) | while read -r file; do' >> upload.sh
        echo '  echo "Uploading $file"' >> upload.sh
        echo '  sshpass -p "${{ secrets.SFTP_PASSWORD }}" sftp -o StrictHostKeyChecking=no ${{ secrets.SFTP_USER }}@static.115.193.75.5.clients.your-server.de <<EOF' >> upload.sh
        echo '    put $file /var/www/${{ matrix.platform }}/targets/' >> upload.sh
        echo '    bye' >> upload.sh
        echo 'EOF' >> upload.sh
        echo 'done' >> upload.sh

        echo 'find sdk/bin/packages -type f \( -name "*.ipk" -o -name "Packages" -o -name "Packages.gz" -o -name "Packages.sig" -o -name "Packages.manifest" \) | while read -r file; do' >> upload.sh
        echo '  echo "Uploading $file"' >> upload.sh
        echo '  sshpass -p "${{ secrets.SFTP_PASSWORD }}" sftp -o StrictHostKeyChecking=no ${{ secrets.SFTP_USER }}@static.115.193.75.5.clients.your-server.de <<EOF' >> upload.sh
        echo '    put $file /var/www/${{ matrix.platform }}/packages/' >> upload.sh
        echo '    bye' >> upload.sh
        echo 'EOF' >> upload.sh
        echo 'done' >> upload.sh

        chmod +x upload.sh

    - name: Upload Packages to SFTP
      run: |
        ./upload.sh
